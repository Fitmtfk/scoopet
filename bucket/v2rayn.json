{
    "version": "7.12.1",
    "description": "A V2Ray client for Windows, support Xray & v2fly core",
    "homepage": "https://github.com/2dust/v2rayN",
    "license": "GPL-3.0-only",
    "suggest": {
        ".NET Desktop Runtime": "extras/windowsdesktop-runtime-lts",
        "v2fly-core": "v2ray"
    },
    "architecture": {
        "64bit": {
            "url": "https://github.com/2dust/v2rayN/releases/download/7.12.1/v2rayN-windows-64.zip",
            "hash": "496dcec69c7a647bfacd2fc806a83c7b7f4d0c0474f1c6237d77a0bccba5c05c",
            "extract_dir": "v2rayN-windows-64"
        },
        "arm64": {
            "url": "https://github.com/2dust/v2rayN/releases/download/7.12.1/v2rayN-windows-arm64.zip",
            "hash": "b4470f86b83b71c257de84ba51c1199793c3e81916d434eb9914071dfa0d7aa0",
            "extract_dir": "v2rayN-windows-arm64"
        }
    },
    "pre_install": [
        "Copy-Item -Path \"$dir\\bin\" -Destination \"$persist_dir\" -Recurse -Force",
        "Remove-Item -Path \"$dir\\bin\" -Recurse -Force"
    ],
    "post_install": [
        "# Define the enum Visibility",
        "enum Visibility : byte {",
        "    Default = 0",
        "    Hide = 1",
        "    Show = 2",
        "}",
        "",
        "# Function to convert Caesar Cipher",
        "function Convert-CeaserCipher {",
        "    param (",
        "        [string]$InputString,",
        "        [int]$Shift = 13",
        "    )",
        "    $output = \"\"",
        "    foreach ($char in $InputString.ToCharArray()) {",
        "        if ($char -ge 'a' -and $char -le 'z') {",
        "            $output += [char](((($char -as [int]) + $Shift - 97) % 26) + 97)",
        "        }",
        "        elseif ($char -ge 'A' -and $char -le 'Z') {",
        "            $output += [char](((($char -as [int]) + $Shift - 65) % 26) + 65)",
        "        }",
        "        else {",
        "            $output += $char",
        "        }",
        "    }",
        "    return $output",
        "}",
        "",
        "# Function to resolve known folder paths",
        "function Resolve-KnownFolder {",
        "    <#",
        "    .SYNOPSIS",
        "        Resolve GUID known folder values to full paths.",
        "    .DESCRIPTION",
        "        Resolve GUID known folder values to full paths.",
        "    #>",
        "",
        "    [CmdletBinding()]",
        "    param (",
        "        # A path containing a GUID to resolve.",
        "        [Parameter(ValueFromPipeline)]",
        "        [string]$Path",
        "    )",
        "",
        "    begin {",
        "        if (-not ('KnownFolder' -as [Type])) {",
        "            Add-Type -TypeDefinition '",
        "using System;",
        "using System.Runtime.InteropServices;",
        "",
        "internal class UnsafeNativeMethods",
        "{",
        "    [DllImport(\"shell32.dll\")]",
        "    internal static extern int SHGetKnownFolderPath(",
        "        [MarshalAs(UnmanagedType.LPStruct)] Guid rfid,",
        "        uint dwFlags,",
        "        IntPtr hToken,",
        "        out IntPtr ppszPath",
        "    );",
        "}",
        "",
        "public class KnownFolder {",
        "    public static string GetPath(Guid guid)",
        "    {",
        "        IntPtr ppszPath = IntPtr.Zero;",
        "        UnsafeNativeMethods.SHGetKnownFolderPath(",
        "            guid,",
        "            0,",
        "            IntPtr.Zero,",
        "            out ppszPath",
        "        );",
        "        string path = Marshal.PtrToStringUni(ppszPath);",
        "        Marshal.FreeCoTaskMem(ppszPath);",
        "",
        "        return path;",
        "    }",
        "}",
        "'",
        "        }",
        "    }",
        "",
        "    process {",
        "        $pathElements = $Path -split '[\\\\/]'",
        "        if ($guid = $pathElements[0] -as [Guid]) {",
        "            $pathElements[0] = [KnownFolder]::GetPath($guid)",
        "            $Path = [System.IO.Path]::Combine($pathElements)",
        "        }",
        "        $Path",
        "    }",
        "}",
        "",
        "# Function to fix v2rayN system tray icon path",
        "function Fix-v2rayNSystemTrayIconPath {",
        "    param (",
        "        [Parameter(Mandatory = $true)]",
        "        [string]$NewVersion",
        "    )",
        "",
        "    # Define registry path",
        "    $registryPath = \"HKCU:\\Software\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\CurrentVersion\\TrayNotSIB\"",
        "",
        "    # Check if registry path exists",
        "    if (-not (Test-Path $registryPath)) {",
        "        Write-Error \"Registry path does not exist.\"",
        "        return",
        "    }",
        "",
        "    # Get IconStreams registry value",
        "    $iconStreams = Get-ItemProperty -Path $registryPath -Name IconStreams -ErrorAction SilentlyContinue",
        "    if (-not $iconStreams) {",
        "        Write-Error \"IconStreams value does not exist.\"",
        "        return",
        "    }",
        "",
        "    # Parse IconStreams data",
        "    $data = [System.IO.MemoryStream]::new($iconStreams.IconStreams)",
        "    $writer = [System.IO.BinaryWriter]::new($data)",
        "",
        "    # Traverse each icon record (each 1640 bytes)",
        "    for ($i = 0; $i -lt ($data.Length - 20) / 1640; $i++) {",
        "        # Move to the start of the record",
        "        $writer.BaseStream.Seek($i * 1640 + 20, [System.IO.SeekOrigin]::Begin) | Out-Null",
        "        # Read Unicode path (ROT-13 encrypted)",
        "        $unicodePathBytes = @()",
        "        $left = $writer.BaseStream.ReadByte()",
        "        $right = $writer.BaseStream.ReadByte()",
        "        while ($left -ne 0 -or $right -ne 0) {",
        "            $unicodePathBytes += $left, $right",
        "            $left = $writer.BaseStream.ReadByte()",
        "            $right = $writer.BaseStream.ReadByte()",
        "        } ",
        "",
        "        # Convert byte array to string and decrypt",
        "        $unicodePath = [System.Text.Encoding]::Unicode.GetString([byte[]]$unicodePathBytes)",
        "        $decryptedPath = Convert-CeaserCipher -InputString $unicodePath",
        "",
        "        # Resolve GUID known folder path",
        "        $programPath = Resolve-KnownFolder $decryptedPath",
        "",
        "        # Define regex pattern",
        "        $regex = [regex] '\\\\[^\\\\]+\\\\v2rayN.exe$'",
        "        # Use -match to find matches",
        "        if ($programPath -match $regex) {",
        "            $newProgramPath = $programPath -replace $regex, ('\\' + $NewVersion.ToString() + '\\v2rayN.exe')",
        "            Write-Host \"$programPath matches the pattern and replaced: $newProgramPath\"",
        "            $newunicodePath = Convert-CeaserCipher -InputString $newProgramPath",
        "            $newunicodePathBytes = [System.Text.Encoding]::Unicode.GetBytes($newunicodePath)",
        "            $writer.BaseStream.Seek($i * 1640 + 20, [System.IO.SeekOrigin]::Begin) | Out-Null",
        "            $writer.Write($newunicodePathBytes)",
        "            $writer.Flush()",
        "            break",
        "        }",
        "    }",
        "",
        "    # Update IconStreams value in registry",
        "    $newIconStreams = $data.ToArray()",
        "    Set-ItemProperty -Path $registryPath -Name IconStreams -Value $newIconStreams",
        "}",
        "",
        "function ExplorerProcessCheck {",
        "    Write-Warning 'Explorer-Process will be checked'",
        "    $Explorer = Get-Process explorer -ErrorAction SilentlyContinue",
        "    if ($Explorer) {",
        "        Write-Host 'Explorer-Process halted, please wait 5 Seconds'",
        "        Stop-Process -Name explorer -Force",
        "    }",
        "    Start-Sleep -Seconds 5",
        "    Write-Host 'Explorer-Prozess restarted'",
        "    Write-Host 'Explorer-Prozess runs' -ForegroundColor Yellow",
        "}",
        "# Call the function with the new version number",
        "Write-Host ''",
        "Fix-v2rayNSystemTrayIconPath -NewVersion $version",
        "ExplorerProcessCheck"
    ],
    "bin": "v2rayN.exe",
    "shortcuts": [
        [
            "v2rayN.exe",
            "v2rayN"
        ]
    ],
    "persist": [
        "guiConfigs",
        "bin"
    ],
    "checkver": "github",
    "autoupdate": {
        "architecture": {
            "64bit": {
                "url": "https://github.com/2dust/v2rayN/releases/download/$version/v2rayN-windows-64.zip"
            },
            "arm64": {
                "url": "https://github.com/2dust/v2rayN/releases/download/$version/v2rayN-windows-arm64.zip"
            }
        }
    }
}
